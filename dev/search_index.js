var documenterSearchIndex = {"docs":
[{"location":"guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"This guide demonstrates the usage of PairPlots and shows several ways you can customize it to your liking.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Set up:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"using CairoMakie\nusing PairPlots\nusing DataFrames","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"CairoMakie is great for making high quality static figures. Try GLMakie or WGLMakie for interactive plots!","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We will use DataFrames here to wrap our tables and provide pleasant table listings. You can use any Tables.jl compatible source, including simple named tuples of vectors for each column.","category":"page"},{"location":"guide/#Single-Series","page":"Guide","title":"Single Series","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Let's create a basic table of data to vizualize.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"N = 100_000\nα = [2randn(N÷2) .+ 6; randn(N÷2)]\nβ = [3randn(N÷2); 2randn(N÷2)]\nγ = randn(N)\nδ = β .+ 0.6randn(N)\n\ndf = DataFrame(;α, β, γ, δ)\ndf[1:8,:] # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We can plot this data directly using pairplot, and add customizations iteratively.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(df)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Override the axis labels:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df,\n    labels = Dict(\n        # basic string\n        :α => \"parameter 1\",\n        # Makie rich text\n        :β => rich(\"parameter 2\", font=:bold, color=:blue),\n        # LaTeX String\n        :γ => L\"\\frac{a}{b}\",\n    )\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Let's move onto more complex examples. The full syntax of the pairplot function is:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    PairPlots.Series(source) => (::PairPlots.VizType...),\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"That is, it accepts a list of pairs of PairPlots.Series => a tuple of \"vizualiation layers\". As we'll see later on, you can pass keyword arguments with a series, or a specific vizualization layer to customize their behaviour and appearance. If you don't need to adjust any parameters for a whole series, you can just pass in a data source and PairPlots will wrap it for you:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    source => (::PairPlots.VizType...),\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Let's see how this works by iteratively building up the default vizualiation. First, create a basic histogram plot:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Hist(),) # note the comma\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"note: Note\nA tuple or list of vizualization types is required, even if you just want one. Make sure to include the comma in these examples.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Or, a histogram with hexagonal binning:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.HexBin(),)\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Scatter plots:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Scatter(),)\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Filled contour plots:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Contourf(),)\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Outlined contour plots:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Contour(),)\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Now let's combine a few plot types.  Scatter and contours:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Scatter(), PairPlots.Contour())\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Scatter and contours, but hiding points above 2sigma:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (PairPlots.Scatter(filtersigma=2), PairPlots.Contour())\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Placing a HexBin series underneath:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (\n        PairPlots.HexBin(colormap=Makie.cgrad([:transparent, :black])),\n        PairPlots.Scatter(filtersigma=2, color=:black),\n        PairPlots.Contour(color=:black)\n    )\n)","category":"page"},{"location":"guide/#Margin-plots","page":"Guide","title":"Margin plots","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"We can add additional vizualization layers to the diagonals of the plots using the same syntax.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (\n        PairPlots.HexBin(colormap=Makie.cgrad([:transparent, :black])),\n        PairPlots.Scatter(filtersigma=2, color=:black),\n        PairPlots.Contour(color=:black),\n\n        # New:\n        PairPlots.MarginDensity()\n    )\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Adjust margin density KDE bandwidth (note: this multiplies the default bandwidth. A value larger than 1 increases smoothing, less than 1 decreases smoothing).","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (\n        PairPlots.HexBin(colormap=Makie.cgrad([:transparent, :black])),\n        PairPlots.Scatter(filtersigma=2, color=:black),\n        PairPlots.Contour(color=:black),\n\n        PairPlots.MarginDensity(bandwidth=0.5)\n    )\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Adding a histgoram instead of a smoothed kernel density estimate:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df => (\n        PairPlots.HexBin(colormap=Makie.cgrad([:transparent, :black])),\n        PairPlots.Scatter(filtersigma=2, color=:black),\n        PairPlots.Contour(color=:black),\n\n        # New:\n        PairPlots.MarginHist(),\n        PairPlots.MarginConfidenceLimits(),\n    )\n)","category":"page"},{"location":"guide/#Truth-Lines","page":"Guide","title":"Truth Lines","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"You can quickly add lines to mark particular values of each variable on all subplots using Truth:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    df,\n    Truth(\n        (;\n            α = [0, 6],\n            β = 0,\n            γ = 0,\n            δ = [-1, 0, +1],\n        ),\n        label=\"Mean Values\"\n    )\n)","category":"page"},{"location":"guide/#Customize-Axes","page":"Guide","title":"Customize Axes","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"You can customize the axes of the subplots freely in two ways. For these examples, we'll create a variable that is log-normally distributed.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"dfln = DataFrame(;α, β, γ=10 .^ γ, δ)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"First, you can pass axis parameters for all plots along the diagonal using the diagaxis keyword or all plots below the diagonal using the bodyaxis parameter.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Turn on grid lines for the body axes:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(dfln, bodyaxis=(;xgridvisible=true, ygridvisible=true))","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Apply a pseduo-log scale on the margin plots along the diagonal:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(dfln, diagaxis=(;yscale=Makie.pseudolog10, ygridvisible=true))","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The second way you can control the axes is by table column. This allows you to customize how an individual variable is presented across the pair plot.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"For example, we can apply a log scale to all axes that the γ variable is plotted against:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    dfln => (PairPlots.Scatter(), PairPlots.MarginStepHist()),\n    axis=(;\n        γ=(;\n            scale=log10\n        )\n    )\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"note: Note\nWe do not prefix the attribute with x or y. PairPlots.jl will add the correct prefix as needed.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"warning: Warning\nLog scale variables usually work best with Scatter series. Histogram and contour based series sometimes extend past zero, breaking the scale.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"There is also special support for setting the axis limits of each variable:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    dfln => (PairPlots.Scatter(), PairPlots.MarginStepHist()),\n    axis=(;\n        α=(;\n            lims=(;low=-10, high=+10)\n        ),\n        γ=(;\n            scale=log10\n        )\n    )\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"This applies the correct limits either to the vertical axis or horizontal axis as appropriate. Note that the parameters low and/or high must be passed as a named tuple.","category":"page"},{"location":"guide/#Adding-a-title","page":"Guide","title":"Adding a title","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"fig = pairplot(df)\nLabel(fig[0,:], \"This is the title!\")\nfig","category":"page"},{"location":"guide/#Layouts","page":"Guide","title":"Layouts","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"The pairplot function integrates easily within larger Makie Figures.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Customizing the figure:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"fig = Figure(resolution=(400,400))\npairplot(fig[1,1], df => (PairPlots.Contourf(),))\nfig","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"note: Note\nIf you only need to pass arguments to Figure, for convenience you can use pairplot(df, figure=(;...)).","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"You can plot into one part of a larger figure:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"fig = Figure(resolution=(800,800))\n\nscatterlines(fig[1,1], randn(40))\n\npairplot(fig[1,2], df)\n\nlines(fig[2,:], randn(200))\n\n\ncolsize!(fig.layout, 2, 450)\nrowsize!(fig.layout, 1, 450)\n\nfig\n","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Adjust the spacing between axes inside a pair plot:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"fig = Figure(resolution=(600,600))\n\n# Pair Plots must go into a Makie GridLayout. If you pass a GridPosition instead,\n# PairPlots will create one for you.\n# We can then adjust the spacing within that GridLayout.\n\ngs = GridLayout(fig[1,1])\npairplot(gs, df)\n\nrowgap!(gs, 0)\ncolgap!(gs, 0)\n\nfig","category":"page"},{"location":"guide/#Multiple-Series","page":"Guide","title":"Multiple Series","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"You can plot multiple series by simply passing more than one table to pairplot They don't have to have all the same column names.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"# The simplest table format is just a named tuple of vectors.\n# You can also pass a DataFrame, or any other Tables.jl compatible object.\ntable1 = (;\n    x = randn(10000),\n    y = randn(10000),\n)\n\ntable2 = (;\n    x = 1 .+ randn(10000),\n    y = 2 .+ randn(10000),\n    z = randn(10000),\n)\n\npairplot(table1, table2)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"You may want to add a legend:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"\nc1 = Makie.wong_colors(0.5)[1]\nc2 = Makie.wong_colors(0.5)[2]\n\npairplot(\n    PairPlots.Series(table1, label=\"table 1\", color=c1, strokecolor=c1),\n    PairPlots.Series(table2, label=\"table 2\", color=c2, strokecolor=c2),\n)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"You can customize each series independently if you wish.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pairplot(\n    table2 => (PairPlots.HexBin(colormap=:magma), PairPlots.MarginDensity(color=:orange),  PairPlots.MarginConfidenceLimits(color=:black)),\n    table1 => (PairPlots.Contour(color=:cyan, strokewidth=5),),\n)","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"pairplot\nPairPlots.AbstractSeries\nPairPlots.Series\nPairPlots.Truth\nPairPlots.VizType\nPairPlots.VizTypeBody\nPairPlots.VizTypeDiag\nPairPlots.HexBin\nPairPlots.Hist\nPairPlots.Contour\nPairPlots.Contourf\nPairPlots.Scatter\nPairPlots.MarginConfidenceLimits\nPairPlots.MarginHist\nPairPlots.MarginStepHist\nPairPlots.MarginDensity","category":"page"},{"location":"api/#PairPlots.pairplot","page":"API","title":"PairPlots.pairplot","text":"pairplot(inputs...; figure=(;), kwargs...)\n\nConvenience method to generate a new Makie figure with resolution (800,800) and then call pairplot as usual. Returns the figure.\n\nExample:\n\nfig = pairplot(table)\n\n\n\n\n\npairplot(gridpos::Makie.GridPosition, inputs...; kwargs...)\n\nCreate a pair plot at a given grid position of a Makie figure.\n\nExample\n\nfig = Figure()\npairplot(fig[2,3], table)\nfig\n\n\n\n\n\npairplot(gridpos::Makie.GridLayout, inputs...; kwargs...)\n\nConvenience function to create a reasonable pair plot given  one or more inputs that aren't full specified. Wraps input tables in PairPlots.Series() with a distinct color specified for each series.\n\nHere are the defaults applied for a single data table:\n\npairplot(fig[1,1], table) == # approximately the following:\npairplot(\n    PairPlots.Series(table, color=Makie.RGBA(0., 0., 0., 0.5)) => (\n        PairPlots.HexBin(colormap=Makie.cgrad([:transparent, :black]),bins=32),\n        PairPlots.Scatter(filtersigma=2), \n        PairPlots.Contour(),\n        PairPlots.MarginDensity(\n            color=:transparent,\n            color=:black,\n            linewidth=1.5f0\n        ),\n        PairPlots.MarginConfidenceLimits()\n    )\n)\n\nHere are the defaults applied for 2 to 5 data tables:\n\npairplot(fig[1,1], table1, table2) == # approximately the following:\npairplot(\n    PairPlots.Series(table1, color=Makie.wong_colors(0.5)[1]) => (\n        PairPlots.Scatter(filtersigma=2), \n        PairPlots.Contourf(),\n        PairPlots.MarginDensity(\n            linewidth=2.5f0\n        )\n    ),\n    PairPlots.Series(table2, color=Makie.wong_colors(0.5)[2]) => (\n        PairPlots.Scatter(filtersigma=2), \n        PairPlots.Contourf(),\n        PairPlots.MarginDensity(\n            linewidth=2.5f0\n        )\n    ),\n)\n\nFor 6 or more tables, the defaults are approximately:\n\nPairPlots.Series(table1, color=Makie.wong_colors(0.5)[series_i]) => (\n    PairPlots.Contour(sigmas=[1]),\n    PairPlots.MarginDensity(\n        linewidth=2.5f0\n    )\n)\n\n\n\n\n\npairplot(gridpos::Makie.GridLayout, inputs...; kwargs...)\n\nMain PairPlots function. Create a pair plot by plotting into a grid layout within a Makie figure.\n\nInputs should be one or more Pair of PairPlots.AbstractSeries => tuple of VizType.\n\nAdditional arguments:\n\nlabels: customize the axes labels with a Dict of column name (symbol) to string, Makie rich text, or LaTeX string.\ndiagaxis: customize the Makie.Axis of plots along the diagonal with a named tuple of keyword arguments.\nbodyaxis: customize the Makie.Axis of plots under the diagonal with a named tuple of keyword arguments.\naxis: customize the axes by parameter using a Dict of column name (symbol) to named tuple of axis settings. x and y are automatically prepended based on the parameter and subplot.  For global properties, see diagaxis and bodyaxis.\nlegend:  additional keyword arguments to the Legend constructor, used if one or more series are labelled. You can of course also create your own Legend and inset it into the Figure for complete control. \n\nExamples\n\nBasic usage:\n\ntable = (;a=randn(1000), b=randn(1000), c=randn(1000))\npairplot(table)\n\nCustomize labels:\n\npairplot(table, labels=Dict(:a=>L\"\\sum{a^2}\"))\n\nUse a pseudo log scale for one variable:\n\npairplot(table, axis=(; a=(;scale=Makie.pseudolog10) ))\n\n\n\n\n\n","category":"function"},{"location":"api/#PairPlots.AbstractSeries","page":"API","title":"PairPlots.AbstractSeries","text":"AstractSeries\n\nRepresents some kind of series in PairPlots.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Series","page":"API","title":"PairPlots.Series","text":"Series(data; label=nothing, kwargs=...)\n\nA data series in PairPlots. Wraps a Tables.jl compatible table. You can optionally pass a label for this series to use in the plot legend. Keyword arguments are forwarded to every plot call for this series.\n\nExamples:\n\nser = Series(table; label=\"series 1\", color=:red)\n\n\n\n\n\nSeries(matrix::AbstractMatrix; label=nothing, kwargs...)\n\nConvenience constructor to build a Series from an abstract matrix. The columns are named accordingly to the axes of the Matrix (usually :1 though N).\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Truth","page":"API","title":"PairPlots.Truth","text":"Truth(truths; labels=nothing, kwargs=...)\n\nMark a set of \"true\" values given by truths which should be either a named tuple, Dict, etc that can be indexed by the column name and returns a value or values.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.VizType","page":"API","title":"PairPlots.VizType","text":"\" A type of PairPlots vizualization.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.VizTypeBody","page":"API","title":"PairPlots.VizTypeBody","text":"\" A type of PairPlots vizualization that compares two variables.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.VizTypeDiag","page":"API","title":"PairPlots.VizTypeDiag","text":"\"     VizTypeBody\n\nA type of PairPlots vizualization that only shows one variable. Used  for the plots along the diagonal.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.HexBin","page":"API","title":"PairPlots.HexBin","text":"HexBin(;kwargs...)\n\nPlot two variables against eachother using a Makie Hex Bin series. kwargs are forwarded to the plot function and can be used to control the number of bins and the appearance.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Hist","page":"API","title":"PairPlots.Hist","text":"Hist(;kwargs...)\nHist(histprep_function; kwargs...)\n\nPlot two variables against eachother using a 2D histogram heatmap. kwargs are forwarded to the plot function and can be used to control the number of bins and the appearance.\n\nnote: Note\nYou can optionally pass a function to override how the histogram is calculated. It should have the signature: prepare_hist(xs, ys, nbins) and return a vector of horizontal bin centers, vertical bin centers, and a matrix of weights.tip: Tip\nYour prepare_hist function it does not have to obey nbins\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Contour","page":"API","title":"PairPlots.Contour","text":"Contour(;sigmas=1:2, bandwidth=1.0, kwargs...)\n\nPlot two variables against eachother using a contour plot. The contours cover the area under a Gaussian given by sigmas, which must be <: AbstractVector. kwargs are forwarded to the plot function and can be used to control the appearance.\n\nKernelDensity.jl is used to produce smoother contours. The bandwidth of the KDE is chosen automatically by that package, but you can scale the bandwidth used up or down by a constant factor by passing bandwidth when creating the series. For example, bandwidth=2.0 will double the KDE bandwidth and result in smoother  contours.\n\nnote: Note\nContours are calculated using Contour.jl and plotted as a Makie line series.\n\nSee also: Contourf\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Contourf","page":"API","title":"PairPlots.Contourf","text":"Contourf(;sigmas=1:2, bandwidth=1.0, kwargs...)\n\nPlot two variables against eachother using a filled contour plot. The contours cover the area under a Gaussian given by sigmas, which must be <: AbstractVector. kwargs are forwarded to the plot function and can be used to control the appearance.\n\nKernelDensity.jl is used to produce smoother contours. The bandwidth of the KDE is chosen automatically by that package, but you can scale the bandwidth used up or down by a constant factor by passing bandwidth when creating the series. For example, bandwidth=2.0 will double the KDE bandwidth and result in smoother  contours.\n\nKernelDensity.jl is used to produce smoother contours.\n\nSee also: Contour\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.Scatter","page":"API","title":"PairPlots.Scatter","text":"Scatter(;kwargs...)\n\nPlot two variables against eachother using a scatter plot.kwargs are forwarded to the plot function and can be used to control the appearance.\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.MarginConfidenceLimits","page":"API","title":"PairPlots.MarginConfidenceLimits","text":"MarginConfidenceLimits(;titlefmt=\"$\\mathrm{%.2f^{+%.2f}_{-%.2f}}$\", kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.MarginHist","page":"API","title":"PairPlots.MarginHist","text":"MarginHist(;kwargs...)\nMarginHist(histprep_function; kwargs...)\n\nPlot a marginal filled histogram of a single variable along the diagonal of the grid. kwargs are forwarded to the plot function and can be used to control the number of bins and the appearance.\n\ntip: Tip\nYou can optionally pass a function to override how the histogram is calculated. It should have the signature: prepare_hist(xs, nbins) and return a vector of bin centers and a vector of weights.note: Note\nYour prepare_hist function it does not have to obey nbins\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.MarginStepHist","page":"API","title":"PairPlots.MarginStepHist","text":"MarginStepHist(;kwargs...)\nMarginStepHist(histprep_function; kwargs...)\n\nPlot a marginal histogram without filled columns of a single variable along the diagonal of the grid. kwargs are forwarded to the plot function and can be used to control the number of bins and the appearance.\n\ntip: Tip\nYou can optionally pass a function to override how the histogram is calculated. It should have the signature: prepare_hist(xs, nbins) and return a vector of bin centers and a vector of weights.note: Note\nYour prepare_hist function it does not have to obey nbins\n\n\n\n\n\n","category":"type"},{"location":"api/#PairPlots.MarginDensity","page":"API","title":"PairPlots.MarginDensity","text":"MarginDensity(;kwargs...)\n\nPlot the smoothed marginal density of a variable along the diagonal of the grid, using Makie's density  function. kwargs are forwarded to the plot function and can be used to control the appearance.\n\n\n\n\n\n","category":"type"},{"location":"chains/#Integration-with-MCMCChains.jl","page":"MCMCChains","title":"Integration with MCMCChains.jl","text":"","category":"section"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"MCMC packages like Turing often produce results in the form of an MCMCChains.Chain. There is special support in PairPlots.jl for plotting these chains.","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"note: Note\nThe integration between PairPlots and MCMCChains only works on Julia 1.9 and above. On previous versions, you can work around this by running pairplot(DataFrame(chn)).","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"using MCMCChains","category":"page"},{"location":"chains/#Plotting-chains","page":"MCMCChains","title":"Plotting chains","text":"","category":"section"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"For this example, we'll use the following code to generate a Chain. In a real code, you would likey receive a chain as a result of sampling from a model.","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"chn1 = Chains(randn(10000, 5, 3) .* [1 2 3 4 5] .* [1;;;2;;;3], [:a, :b, :c, :d, :e])","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"You can plot the results from all chains in the Chains object:","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"using CairoMakie, PairPlots\n\npairplot(chn1)","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"The labels are taken from the column names of the chains. You can modify them by passing in a dictionary mapping column names to strings, LaTeX strings, or Makie rich text objects.","category":"page"},{"location":"chains/#Plotting-individual-chains-separately","page":"MCMCChains","title":"Plotting individual chains separately","text":"","category":"section"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"If you have multiple parallel chains and want to plot them in different colors, you can pass each one to pairplot:","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"pairplot(chn1[:,:,1], chn1[:,:,2], chn1[:,:,3])","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"You can title the series indepdendently as well:","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"c1 = Makie.wong_colors(0.5)[1]\nc2 = Makie.wong_colors(0.5)[2]\nc3 = Makie.wong_colors(0.5)[3]\n\npairplot(\n    PairPlots.Series(chn1[:,:,1], label=\"chain 1\", color=c1, strokecolor=c1),\n    PairPlots.Series(chn1[:,:,2], label=\"chain 2\", color=c2, strokecolor=c2),\n    PairPlots.Series(chn1[:,:,3], label=\"chain 3\", color=c3, strokecolor=c3),\n)","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"If your chains are well converged, then the different series should look the same.","category":"page"},{"location":"chains/#Comparing-the-results-of-two-simulations","page":"MCMCChains","title":"Comparing the results of two simulations","text":"","category":"section"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"You may want to compare the results of two simulations. Consider the following chains:","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"chn2 = Chains(randn(10000, 5, 1) .* [1 2 3 4 5], [:a, :b, :c, :d, :e])\nchn3 = Chains(randn(10000, 4, 1) .* [5 4 2 1], [:a, :b, :d, :e]);","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"Just pass them all to pairplot:","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"pairplot(chn2, chn3)","category":"page"},{"location":"chains/","page":"MCMCChains","title":"MCMCChains","text":"Note how the parameters of the chains do not have to match exactly. Here, chn2 has an additional variable not present in chn3.","category":"page"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If you don't need any customization, the easiest way to get started is to call pairplot with one or more tables or matrices.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using CairoMakie\nusing PairPlots\n\n# The simplest table format is just a named tuple of vectors.\n# You can also pass a DataFrame, or any other Tables.jl compatible object.\ntable = (;\n    x = randn(10000),\n    y = randn(10000),\n)\n\npairplot(table)","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The axis labels are taken from the column names by default, but you can customize them (see Guide).","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If you're in a hurry, you can just pass a Matrix directly (or any subtype of AbstractMatrix).","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using CairoMakie\nusing PairPlots\n\n# As always in Julia, columns are treated as variables, and rows as samples.\nmat = randn(10000,6)\npairplot(mat)","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Multiple tables are also supported. They don't have to have the same column names.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using CairoMakie\nusing PairPlots\n\n# The simplest table format is just a named tuple of vectors.\n# You can also pass a DataFrame, or any other Tables.jl compatible object.\ntable1 = (;\n    x = randn(10000),\n    y = randn(10000),\n)\n\ntable2 = (;\n    x = 1 .+ randn(10000),\n    y = 2 .+ randn(10000),\n    z = randn(10000),\n)\n\npairplot(table1, table2)","category":"page"},{"location":"#PairPlots.jl","page":"Home","title":"PairPlots.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Beautiful and flexible vizualizations of high dimensional data","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build status) (Image: Package Downloads) (Image: Stars) (Image: Commit Activity) (Image: codecov) (Image: License) (Image: PkgEval)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package produces pair plots, otherwise known as corner plots or scatter plot matrices: grids of 1D and 2D histograms that allow you to visualize high dimensional data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pair plots are an excellent way to vizualize the results of MCMC simulations, but are also a useful way to vizualize correlations in general data tables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The default styles of this package roughly reproduce the output of the Python library corner.py for a single series, and chainconsumer.py for multiple series. If these are not to your tastes, the package aims to be highly configurable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The current version of PairPlots.jl requires the Makie plotting library. If instead you prefer to use Plots.jl, you can install the legacy version 0.6 of PairPlots (see archived documentation here)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For related functionality, see also StatsPlots.cornerplot.","category":"page"}]
}
